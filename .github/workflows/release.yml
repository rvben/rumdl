name: Release (Simplified with mise)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      # Toolchain setup (mise installs rust, python, maturin, etc.)
      - uses: jdx/mise-action@v2

      # Build wheel using zig for cross-compilation
      - name: Build wheel
        run: maturin build --release --target ${{ matrix.target }} --compatibility manylinux2014 --zig
        shell: bash

      # Build binary with zig for cross-compilation
      - name: Build binary
        run: |
          # For Linux ARM64, we need cargo-zigbuild
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            cargo install cargo-zigbuild --locked
            cargo zigbuild --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      # Rename binary
      - name: Prepare artifacts
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            mv target/${{ matrix.target }}/release/rumdl.exe rumdl-${{ matrix.target }}.exe
          else
            mv target/${{ matrix.target }}/release/rumdl rumdl-${{ matrix.target }}
          fi
        shell: bash

      # Upload artifacts
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          path: target/wheels/*
          name: wheel-${{ matrix.target }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          path: rumdl-${{ matrix.target }}*
          name: rumdl-${{ matrix.target }}

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jdx/mise-action@v2
      - run: maturin sdist
      - uses: actions/upload-artifact@v4
        with:
          path: target/wheels/*.tar.gz
          name: sdist

  release:
    runs-on: ubuntu-latest
    needs: [build, sdist]
    steps:
      - uses: actions/checkout@v4
      - uses: jdx/mise-action@v2

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --locked

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          find artifacts -type f \( -name "*.whl" -o -name "*.tar.gz" \) | xargs python -m twine upload

      - name: Extract release notes
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          if [ -f scripts/extract-changelog.sh ] && [ -f CHANGELOG.md ]; then
            chmod +x scripts/extract-changelog.sh
            ./scripts/extract-changelog.sh "$VERSION" > release-notes.md || echo "No changelog entry found for $VERSION" > release-notes.md
          else
            echo "No changelog found" > release-notes.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-notes.md
          files: artifacts/rumdl-*/rumdl-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify rumdl-pre-commit
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.PRECOMMIT_DISPATCH_TOKEN }}
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/rvben/rumdl-pre-commit/dispatches \
            -d '{"event_type": "pypi_release"}'